Assignment 12 Searching 

Searching 26 / 06 / 2023

Class Work - 
1)Gien is sorted array find the frequency of element k means dublicate of k , find how much dublicate element present in the array like k .
ans - 

Approach -1 )Using linear search algorithm .


import java.io.*;

class HelloWorld {
public static void findFirstAndLast(int arr[], int x)
{
int n = arr.length;
int first = -1, last = -1;
for (int i = 0; i < n; i++) {
if (x != arr[i])
continue;
if (first == -1)
first = i;
last = i;
}
int freq = 0;
if (first != -1) {
System.out.println("First Occurrence = "
+ first);
System.out.println("Last Occurrence = " + last);
freq = last - first + 1;
System.out.println();
System.out.print(freq);
   }
else
System.out.println("Not Found");
   }

public static void main(String[] args){
int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
int x = 2;
findFirstAndLast(arr, x);
    }
  }
System.out.print(freq);
   }
}
Approach 2 ) binary search - 

import java.io.*;
class HelloWorld {
//first occurance 
public static int first(int arr[], int low, int high,
int x, int n)
{
if (high >= low) {
int mid = low + (high - low) / 2;
if ((mid == 0 || x > arr[mid - 1])
&& arr[mid] == x)
return mid;
else if (x > arr[mid])
return first(arr, (mid + 1), high, x, n);
else
return first(arr, low, (mid - 1), x, n);
}
return -1;
}
//last occurance
public static int last(int arr[], int low, int high,
int x, int n)
{
if (high >= low) {
int mid = low + (high - low) / 2;
if ((mid == n - 1 || x < arr[mid + 1])
&& arr[mid] == x)
return mid;
else if (x < arr[mid])
return last(arr, low, (mid - 1), x, n);
else
return last(arr, (mid + 1), high, x, n);
}
return -1;
}

//main code
public static void main(String[] args){
int arr[] = { 1, 2, 2, 2, 2, 3, 4, 7, 8, 8 };
int n = arr.length;
int x = 8;
System.out.println("First Occurrence = "
+ first(arr, 0, n - 1, x, n));
System.out.println("Last Occurrence = "
+ last(arr, 0, n - 1, x, n));
   }
}

3) Search Insert Position
Companies
Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with O(log n) runtime complexity.

Solution -

class Solution {
public int searchInsert(int[] nums, int target) {
int n = nums.length;
int l=0 , r = n-1;

while(l<=r){
int mid = l + ((r - l)/2);

if(nums[mid]==target)
return mid;
else if(nums[mid]>target)
r = mid-1;
else
l=mid+1;
}
return l ;
}
}



4). Find Peak Element
Companies
A peak element is an element that is strictly greater than its neighbors.

Given a 0-indexed integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.

You may imagine that nums[-1] = nums[n] = -âˆž. In other words, an element is always considered to be strictly greater than a neighbor that is outside the array.

You must write an algorithm that runs in O(log n) time.

Solution -
// class Solution {
// public int findPeakElement(int[] nums) {
// int n = nums.length;
// // if(){
// // return nums[0];
// // }

// if(nums[0] > nums[1] ){
// return nums[0];
// }

// if(nums[n-1]> nums[n-2]){
// return nums[n-1];
// }

// int start =0 , end = n-1;
// while(start <= end) {
// int mid = start + (end - start)/2;

// if(nums[mid] > nums[mid-1] && nums[mid] > nums[mid+1])
// return mid;

// else if(nums[mid] < nums[mid-1])
// end = mid - 1;

// else if(nums[mid] < nums[mid+1])
// start = mid + 1;
// }
// return -1;
// }
// }
class Solution {
public int findPeakElement(int[] nums) {
int s=0;
int e=nums.length-1;
while(s<e){
int mid=s+(e-s)/2;
if(mid<nums.length-1 && nums[mid]>nums[mid+1]){
e= mid;
}else{
s=mid+1;
}
}
return e;
}
}
