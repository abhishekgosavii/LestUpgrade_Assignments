Assignment 4 Pattern 

Time complexity and Array Introduction- 9 june

1)You are given an integer T (number of test cases). You are given array A and an integer B for each test case. You have to tell whether B is present in array A or not.Problem Constraints


soluiton - 1

5

4 1 5 9 1

5


Output 1:
1


yes 5 is the present in the array hence 1 else 0 .

Souln -

import java.io.*;

import java.util.*;

import java.text.*;

import java.math.*;

import java.util.regex.*;



public class Solution {



public static void main(String[] args) {

/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */

Scanner sc = new Scanner (System.in) ;

int a = sc.nextInt();

int b = sc.nextInt();

int arr[] = new int[b];

for(int i=0;i<b;i++){

arr[i] = sc.nextInt();

}

int target = sc.nextInt();

for(int i=0;i<b;i++){

if(arr[i]==target)

System.out.println("1");



else

System.out.println("0");

}

}

}

2)
You are given an integer array A. You have to find the second largest element/value in the array or report that no such element exists.

solution -
import java.io.*;

import java.util.*;

import java.text.*;

import java.math.*;

import java.util.regex.*;



public class Solution {



public static void main(String[] args) {

/* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution. */





Scanner sc = new Scanner (System.in) ;

int size = sc.nextInt();

int array[] = new int[size];

for(int i=0;i<size;i++){

array[i] = sc.nextInt();

}

int temp=0;

for(int i = 0; i<size; i++ ){

for(int j = i+1; j<size; j++){



if(array[i]>array[j]){

temp = array[i];

array[i] = array[j];

array[j] = temp;

}

}

}

System.out.println(array[size-2]);

}

}


3)You are given an array of integers A of size N.Return the difference between the maximum among all even numbers of A and the minimum among all odd numbers in A.
Problem Constraints
2 <= N <= 1e5-1e9 <= A[i] <= 1e9There is atleast 1 odd and 1 even number in A
Input Format
The first argument given is the integer array, A.
Output Format
Return maximum among all even numbers of A - minimum among all odd numbers in A
Solution -

import java.io.*;

import java.util.*;

import java.text.*;

import java.math.*;

import java.util.regex.*;



public class Solution {

// Naive solution to find the minimum and maximum number in an array

public static void findMinAndMax(int[] nums)

{

// initialize minimum and maximum element with the first element

int max = nums[0];

int min = nums[0];



// do for each array element

for (int i = 1; i < nums.length; i++)

{

// if the current element is greater than the maximum found so far

if (nums[i] > max) {

max = nums[i];

}



// if the current element is smaller than the minimum found so far

else if (nums[i] < min) {

min = nums[i];

}

}



System.out.println( max - min);





}



public static void main(String[] args)

{

int[] nums = { 5, 7, 2, 4, 9, 6 };



// find the minimum and maximum element, respectively

findMinAndMax(nums);

}

}

4)You are given an integer T denoting the number of test cases. For each test case, you are given an integer array A.
You have to print the odd and even elements of array A in 2 separate lines.
NOTE: Array elements should have the same relative order as in A.

solution :

import java.util.*;
public class OddEvenElements {

public static void main(String[] args) {

Scanner scanner = new Scanner(System.in);



// Input the number of test cases

// the number of test cases:

int T = scanner.nextInt();



for (int i = 0; i < T; i++) {

// Input the length of the array

//Enter the length of array for test case

int n = scanner.nextInt();



// Input the elements of the array

//elements to put in the array

int[] arr = new int[n];

for (int j = 0; j <n; j++) {

arr[j] = scanner.nextInt();

}





//printing odd elemnts

printOddElements(arr);



// Print even elements



printEvenElements(arr);

}

}



public static void printOddElements(int[] arr) {

for (int element : arr) {

if (element % 2 != 0) {

System.out.print(element + " ");

}

}

System.out.println();

}



public static void printEvenElements(int[] arr) {

for (int element : arr) {

if (element % 2 == 0) {

System.out.print(element + " ");

}

}

System.out.println();

}

}

5)

Given an integer array A of size N and an integer B, you have to print the same array after rotating it B times towards the right.


Example Input



Input 1 :

4 1 2 3 4

2


output-


import java.util.Scanner;



public class Solution {

public static void rotateArray(int[] arr, int rotations) {

int n = arr.length;

// Normalize the rotations to avoid unnecessary operations

rotations = rotations % n;



// Reverse the entire array

reverseArray(arr, 0, n - 1);



// Reverse the first 'rotations' elements

reverseArray(arr, 0, rotations - 1);



// Reverse the remaining elements

reverseArray(arr, rotations, n - 1);



// Print the rotated array

for (int i = 0; i < n; i++) {

System.out.print(arr[i] + " ");

}

System.out.println();

}



public static void reverseArray(int[] arr, int start, int end) {

while (start < end) {

int temp = arr[start];

arr[start] = arr[end];

arr[end] = temp;

start++;

end--;

}

}



public static void main(String[] args) {

Scanner sc = new Scanner(System.in);

int n = sc.nextInt();

int[] arr = new int[n];

for (int i = 0; i < n; i++) {

arr[i] = sc.nextInt();

}

int rotations = sc.nextInt();

rotateArray(arr, rotations);

}

}


6)Given an array A and an integer B. A pair(i, j) in the array is a good pair if i != j and (A[i] + A[j] == B). Check if any good pair exist or not.


solution -


import java.util.Scanner;



public class solution {

public static void main(String[] args) {

Scanner sc = new Scanner(System.in);

int n = sc.nextInt();

int[] arr = new int[n];

for (int i = 0; i < n; i++) {

arr[i] = sc.nextInt();

}

int b = sc.nextInt();



int count=0;





for(int i=0;i<n;i++){

for(int j=i+1;j<n;j++){

if(i!=j){



if(arr[i]+arr[j]==b){

count++;

}

}

}

}

System.out.println(count);

}

}

No Of good pair -
Leetcode -
1512. Number of Good Pairs


solution -


import java.util.Scanner;



public class solution {

public static void main(String[] args) {

Scanner sc = new Scanner(System.in);

int n = sc.nextInt();

int[] arr = new int[n];

for (int i = 0; i < n; i++) {

arr[i] = sc.nextInt();

}

int b = sc.nextInt();



int count=0;





for(int i=0;i<n;i++){

for(int j=i+1;j<n;j++){

if(i!=j){



if(arr[i]+arr[j]==b){

count++;

}

}

}

}

System.out.println(count);

}

}

